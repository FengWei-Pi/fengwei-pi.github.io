{"version":3,"file":"static/js/51.0092f631.chunk.js","mappings":"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","sources":["models/turnGame/model.ts","models/connectFour/connectFourBoard.ts","models/turnGame/neuralNet.ts","models/connectFour/connectFourNeuralNet.ts","models/turnGame/mcts_nn.ts","models/connectFour/connectFourNNStrategyWorkerTypes.ts","models/connectFour/connectFourNNStrategyWorker.ts","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["/** Numerical values for win, loss, and draw. */\r\nexport enum TerminalValue {\r\n  Win = 1,\r\n  Loss = -1,\r\n  Draw = 0\r\n}\r\n\r\n// TODO: replace getPastMoves with getState as function, and add StateType as type parameter.\r\n// Currently, class is mutable and can cause problems. getState should represent\r\n// an immutable object that encapsulates the entire state, including the players'\r\n// terminal values. Additionally, for a large number of moves, this is more efficient\r\n// than getPastMoves for representing game state.\r\n\r\n/**\r\n * An interface for a turn based game model. The implementation must also\r\n * have a constructor that accepts an optional object instance of its own class,\r\n * where the newly created object must be a deep copy of the passed object.\r\n */\r\nexport interface TurnGameModel<MoveType> {\r\n  /** Makes move for current player. Throws error if move is invalid. */\r\n  makeMove: (move: MoveType) => void,\r\n\r\n  /** Returns the move that was undone. Throws error if there were no moves. */\r\n  undoMove: (move: MoveType) => void,\r\n\r\n  isValidMove: (move: MoveType) => boolean,\r\n\r\n  /** Returns the player that has the current move. Player index starts at 0. */\r\n  getCurrentPlayer: () => number,\r\n  \r\n  /**\r\n   * Returns the terminal value for the given player. Returns null if game has not\r\n   * ended yet.\r\n   */\r\n  getTerminalValue: (player: number) => TerminalValue | null,\r\n \r\n  getValidMoves: () => Array<MoveType>,\r\n\r\n  /**\r\n   * Returns the sequence of all moves played, starting with player 0 and continuing\r\n   * sequentially. This should completely encapsulates the current state of the game,\r\n   * including the current turn's player, the possible moves, whether a player has won,\r\n   * etc.\r\n   */\r\n  getPastMoves: () => Array<MoveType>,\r\n}\r\n","import BitSet from \"bitset\";\r\nimport { TerminalValue, TurnGameModel } from \"../turnGame/model\";\r\n\r\nexport type ConnectFourMove = number;\r\n\r\n// Bitboards based off https://github.com/denkspuren/BitboardC4/blob/master/BitboardDesign.md\r\n/**\r\n * Class representing connect four board with efficient operations.\r\n * \r\n * @see https://en.wikipedia.org/wiki/Connect_Four#Gameplay for rules.\r\n */\r\nexport class ConnectFourBoard implements TurnGameModel<ConnectFourMove> {\r\n  static NUM_ROWS = 6;\r\n  static NUM_COLS = 7;\r\n\r\n  private bitboards: [BitSet, BitSet];\r\n  private heights: [number, number, number, number, number, number, number];\r\n  private numMoves: number;\r\n  private moves: Array<ConnectFourMove>;\r\n\r\n  // Create new empty connect four game with players zero and one.\r\n  // Player zero moves first.\r\n  constructor(connectFour? : ConnectFourBoard) {\r\n    if (connectFour === undefined) {\r\n      this.bitboards = [new BitSet(), new BitSet()];\r\n\r\n      this.heights = [0, 7, 14, 21, 28, 35, 42];\r\n      this.numMoves = 0;\r\n      this.moves = []; // Stores column indexes of moves for the entire game\r\n    } else {\r\n      this.bitboards = [new BitSet(connectFour.bitboards[0]), new BitSet(connectFour.bitboards[1])];\r\n\r\n      this.heights = [...connectFour.heights];\r\n      this.numMoves = connectFour.numMoves;\r\n      this.moves = [...connectFour.moves];\r\n    }\r\n  }\r\n\r\n  // Returns 0 or 1\r\n  getCurrentPlayer() {\r\n    return this.numMoves & 1;\r\n  }\r\n\r\n  makeMove(col) {\r\n    if (!this.isValidMove(col)) throw new Error(\"Making invalid move\");\r\n\r\n    const move = new BitSet([this.heights[col]++]);\r\n    this.bitboards[this.numMoves & 1] = move.xor(this.bitboards[this.numMoves & 1]);\r\n    this.moves.push(col);\r\n    ++this.numMoves;\r\n  }\r\n\r\n  undoMove() {\r\n    if (this.numMoves <= 0) throw new Error(\"Undoing move of game with no moves\");\r\n\r\n    --this.numMoves;\r\n    const col = this.moves.pop()!;\r\n    const move = new BitSet([--this.heights[col]]);\r\n    this.bitboards[this.numMoves & 1] = move.xor(this.bitboards[this.numMoves & 1]);\r\n\r\n    return col;\r\n  }\r\n\r\n  // Returns true if the game is full and no more moves can be made\r\n  private isFull() {\r\n    return this.numMoves >= 42;\r\n  }\r\n  \r\n  isValidMove(move: number) {\r\n    if (move < 0 || move >= ConnectFourBoard.NUM_COLS) return false;\r\n\r\n    const TOP = new BitSet(\"1000000100000010000001000000100000010000001000000\");\r\n    if (TOP.get(this.heights[move]) === 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  getTerminalValue(player: number) {\r\n    if (player !== 0 && player !== 1) throw new RangeError(\"Getting terminal value of invalid player\");\r\n\r\n    const bitboard = this.bitboards[this.getCurrentPlayer() ^ 1];\r\n    const bitsetZero = new BitSet(0);\r\n\r\n    // Whether previous player has won\r\n    let hasWon = false;\r\n\r\n    if (\r\n      // Checks if four pieces are connected in diagonal \\\r\n      !bitboard.and(bitboard.slice(6)).and(bitboard.slice(12)).and(bitboard.slice(18)).equals(bitsetZero) ||\r\n      // diagonal /\r\n      !bitboard.and(bitboard.slice(8)).and(bitboard.slice(16)).and(bitboard.slice(24)).equals(bitsetZero) ||\r\n      // horizontal\r\n      !bitboard.and(bitboard.slice(7)).and(bitboard.slice(14)).and(bitboard.slice(21)).equals(bitsetZero) ||\r\n      // vertical\r\n      !bitboard.and(bitboard.slice(1)).and(bitboard.slice(2)).and(bitboard.slice(3)).equals(bitsetZero)\r\n    ) {\r\n      hasWon = true;\r\n    }\r\n\r\n    // If there's no winner and game is not full, return game is ongoing.\r\n    // Otherwise, there's no winner and game is full, return draw.\r\n    if (!hasWon) {\r\n      if (!this.isFull()) return null;\r\n      return TerminalValue.Draw;\r\n    }\r\n\r\n    // If the given player is the current player, return loss\r\n    if (this.getCurrentPlayer() === player) return TerminalValue.Loss;\r\n    // If the given player is the previous player, return win\r\n    else return TerminalValue.Win;\r\n  }\r\n\r\n  getValidMoves() {\r\n    const moves : Array<number> = [];\r\n\r\n    const TOP = new BitSet(\"1000000100000010000001000000100000010000001000000\");\r\n    this.heights.forEach((height, index) => {\r\n      if (TOP.get(height) === 0) moves.push(index);\r\n    });\r\n    return moves;\r\n  }\r\n\r\n  getPastMoves() {\r\n    return [...this.moves];\r\n  }\r\n}","import * as tf from \"@tensorflow/tfjs\";\r\nimport buf from \"buffer/\";\r\nimport type { TurnGameModel } from \"./model\";\r\n\r\nconst Buffer = buf.Buffer;\r\n\r\n/**\r\n * Class that represents a neural network for evaluating turn game models.\r\n * Derived classes must implement a constructor that accepts a tfjs layers model.\r\n * Objects should be created with `TurnGameNeuralNet.build(DerivedClass, modelStr)`.\r\n */\r\nexport abstract class TurnGameNeuralNet<MoveType, TurnGameType extends TurnGameModel<MoveType>> {\r\n  private model: tf.LayersModel;\r\n\r\n  constructor(model: tf.LayersModel) {\r\n    this.model = model;\r\n  }\r\n\r\n  abstract predict(game: TurnGameType): { priors: Map<MoveType, number>, value: number };\r\n\r\n  /** Returns the TensorFlow layers model from the provided `modelStr` */\r\n  private static getDeserializedModel(modelStr : string) {\r\n    const json = JSON.parse(modelStr);\r\n    return TurnGameNeuralNet.getDeserializedModelFromJson(json);\r\n  }\r\n\r\n  private static getDeserializedModelFromJson(modelJson) {\r\n    const weightData = new Uint8Array(Buffer.from(modelJson.weightData, \"base64\")).buffer;\r\n    \r\n    return tf.loadLayersModel(\r\n      tf.io.fromMemory({\r\n        modelTopology: modelJson.modelTopology,\r\n        weightSpecs: modelJson.weightSpecs,\r\n        weightData: weightData\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representing the model.\r\n   * @see https://stackoverflow.com/questions/55532746/tensorflow-nodejs-serialize-deserialize-a-model-without-writing-it-to-a-uri\r\n   */\r\n  private static async getSerializedModel(model : tf.LayersModel) {\r\n    // @ts-expect-error Using TensorFlow save features to get model data. See tf.io.ModelArtifacts\r\n    const result = await model.save(tf.io.withSaveHandler(async modelArtifacts => modelArtifacts));\r\n\r\n    // @ts-expect-error Converting ArrayBuffer to string\r\n    result.weightData = Buffer.from(result.weightData).toString(\"base64\");\r\n\r\n    return JSON.stringify(result);\r\n  }\r\n\r\n  // Builder pattern to perform async operations when constructing object.\r\n  // See https://stackoverflow.com/a/43433773\r\n  static async build<MoveType, TurnGameType extends TurnGameModel<MoveType>>(\r\n    constructor: new (model: tf.LayersModel) => TurnGameNeuralNet<MoveType, TurnGameType>,\r\n    modelStr: string | Object\r\n  ) {\r\n    let model;\r\n\r\n    if (typeof modelStr === \"string\") model = await TurnGameNeuralNet.getDeserializedModel(modelStr);\r\n    else model = await TurnGameNeuralNet.getDeserializedModelFromJson(modelStr);\r\n\r\n    return new constructor(model);\r\n  }\r\n  \r\n  getModel() {\r\n    return this.model;\r\n  }\r\n  \r\n  async getModelStr() {\r\n    return TurnGameNeuralNet.getSerializedModel(this.model);\r\n  }\r\n}","import * as tf from \"@tensorflow/tfjs\";\r\nimport type BitSet from \"bitset\";\r\n\r\nimport { TurnGameNeuralNet } from \"models/turnGame/neuralNet\";\r\nimport type { ConnectFourBoard, ConnectFourMove } from \"./connectFourBoard\";\r\n\r\n/**\r\n * Class that represents a neural network for evaluating connect four boards.\r\n * Object should be created with `TurnGameNeuralNet.build(ConnectFourNeuralNet, modelStr)`,\r\n * and not with `new ConnectFourNeuralNet(...)`.\r\n */\r\nexport class ConnectFourNeuralNet extends TurnGameNeuralNet<ConnectFourMove, ConnectFourBoard> {\r\n  private getInputTensorsFromBitboards(bitboards: [BitSet, BitSet]) {\r\n    return tf.tidy(() => {\r\n      // Get board input\r\n      const inputBuf = tf.buffer([1, 7, 6, 2]);\r\n  \r\n      for (let i=0; i<2; ++i) {\r\n        for (let ind=0; ind < 48; ++ind) {\r\n          if (bitboards[i].get(ind)) inputBuf.set(1, 0, Math.floor(ind / 7), ind % 7, i);\r\n        }\r\n      }\r\n  \r\n      return inputBuf.toTensor().pad(\r\n        [[0, 0], [0, 0], [0, 0], [0, 1]],\r\n        (bitboards[0].cardinality() + bitboards[1].cardinality()) & 1\r\n      );\r\n    });\r\n  }\r\n\r\n  predict(connectFour: ConnectFourBoard) {\r\n    const outputs : [Array<number>, number] = tf.tidy(() => {\r\n      // @ts-expect-error TODO change to work with connectFour.getPastMoves()\r\n      // instead of private member bitboards\r\n      const inputs = this.getInputTensorsFromBitboards(connectFour.bitboards);\r\n      const random = Math.random();\r\n      const outputTensors = this.getModel().predict(random < 0.5 ? inputs : inputs.reverse(1));\r\n  \r\n      return random < 0.5 ?\r\n        [outputTensors[0].arraySync()[0], outputTensors[1].arraySync()[0][0]]\r\n        : [outputTensors[0].reverse(1).arraySync()[0], outputTensors[1].reverse(1).arraySync()[0][0]];\r\n    });\r\n\r\n    return {\r\n      priors: new Map(outputs[0].map((prior, index) => [index, prior])),\r\n      value: outputs[1]\r\n    };\r\n  }\r\n}\r\n","import PD from \"probability-distributions\";\r\n\r\nimport { TurnGameNeuralNet } from \"./neuralNet\";\r\nimport { TerminalValue } from \"./model\";\r\nimport type { TurnGameModel } from \"./model\";\r\nimport type { MCTS } from \"./mcts\";\r\n\r\ntype Action<MoveType, GameType extends TurnGameModel<MoveType>> = {\r\n  node: MCTS_Node_NN<MoveType, GameType>,\r\n  numChosen: number,\r\n  avgValue: number,\r\n  priorProb: number\r\n};\r\n\r\n/**\r\n * Node for Monte Carlo Tree Search adapted to use neural network evaluation,\r\n * taken from AlphaGo Zero paper\r\n * https://www.deepmind.com/blog/alphago-zero-starting-from-scratch.\r\n * \r\n * In order to create a new node, the generic type arguments must be passed.\r\n * \r\n * @example\r\n * const node = new MCTS_Node_NN<ConnectFourMove, ConnectFourBoard>(\r\n *   new ConnectFourBoard(),\r\n *   ConnectFourBoard\r\n * )\r\n * \r\n */\r\nexport class MCTS_Node_NN<MoveType, GameType extends TurnGameModel<MoveType>> implements MCTS<MoveType, GameType> {\r\n  // Controls how much value to place on exploration. Higher value means more\r\n  // nodes are expanded that don't have the highest action value.\r\n  /**\r\n   * Constant that scales the upper confidence bound of the action value.\r\n   * @see https://medium.com/oracledevs/lessons-from-alphazero-part-3-parameter-tweaking-4dceb78ed1e5#8e97\r\n   */\r\n  private static explorationConstant = 1;\r\n\r\n  // Controls noise added to priors. Values less than 1 favors one random prior,\r\n  // values greater than 1 flattens the prior distribution.\r\n  /**\r\n   * Alpha parameter of Dirichlet distribution. Values drawn from dirichlet distribution\r\n   * are added to priors of action values.\r\n   * \r\n   * @see https://medium.com/oracledevs/lessons-from-alphazero-part-3-parameter-tweaking-4dceb78ed1e5#9847\r\n   */\r\n  private static dirichletAlpha = 0.8;\r\n\r\n  /**\r\n   * The percent that a value from dirichlet distribution is added to prior.\r\n   * @see x value in https://medium.com/oracledevs/lessons-from-alphazero-part-3-parameter-tweaking-4dceb78ed1e5#811a\r\n   */\r\n  private static noisePercent = 0.2;\r\n\r\n  private state: GameType;\r\n  private ctor: new (state: GameType) => GameType;\r\n  private actions: Map<MoveType, Action<MoveType, GameType>> = new Map();\r\n  private actionsChosenTotal = 0;\r\n  private network: TurnGameNeuralNet<MoveType, GameType>;\r\n\r\n  // Undefined if terminal value hasn't been checked yet. Null if game is not terminal.\r\n  // Number if game is terminal.\r\n  private terminalValue: number | null | undefined;\r\n\t\r\n  constructor(\r\n    state: GameType,\r\n    ctor: new (state: GameType) => GameType,\r\n    network: TurnGameNeuralNet<MoveType, GameType>\r\n  ) {\r\n    this.state = state;\r\n    this.ctor = ctor;\r\n    this.network = network;\r\n  }\r\n\r\n  /**\r\n   * Selection step in monte carlo tree search. Returns the best action to select based\r\n   * on the prior and upper confidence bound.\r\n   */\r\n  private selectAction() {\r\n    let bestValue;\r\n    let bestAction;\r\n\r\n    this.actions.forEach(action => {\r\n      const value = action.avgValue + action.priorProb *\r\n        MCTS_Node_NN.explorationConstant *\r\n        Math.sqrt(this.actionsChosenTotal) /\r\n        (1 + action.numChosen);\r\n\r\n      if (bestValue === undefined || value > bestValue) {\r\n        bestValue = value;\r\n        bestAction = action;\r\n      }\r\n    });\r\n\r\n    return bestAction;\r\n  }\r\n\r\n  /** Initialize actions from evaluation of current state and valid moves. */\r\n  private expand() {\r\n    const { priors, value } =this.network.predict(this.state);\r\n\r\n    const validMoves = this.state.getValidMoves();\r\n\r\n    // npm package probability-distributions doesn't have dirichlet distribution directly,\r\n    // so we use the gamma distribution to get a vector of dirichlet distribution values\r\n    // instead, which is exactly what we need\r\n    const noise: Array<number> = PD.rgamma(validMoves.length, MCTS_Node_NN.dirichletAlpha, 1);\r\n    const totalNoise = noise.reduce((a, b) => a + b, 0);\r\n\r\n    let totalProb = 1;\r\n    if (validMoves.length < 7) {\r\n      totalProb = 0;\r\n      validMoves.forEach(move => {\r\n        totalProb += priors.get(move) || 0;\r\n      });\r\n    }\r\n\r\n    validMoves.forEach((move, index) => {\r\n      const child = new MCTS_Node_NN<MoveType, GameType>(\r\n        new this.ctor(this.state),\r\n        this.ctor,\r\n        this.network\r\n      );\r\n      child.state.makeMove(move);\r\n\r\n      this.actions.set(move, {\r\n        node: child,\r\n        numChosen: 0,\r\n        avgValue: 0,\r\n        priorProb: (priors.get(move) || 0) / totalProb * (1-MCTS_Node_NN.noisePercent) +\r\n          noise[index]/totalNoise * MCTS_Node_NN.noisePercent,\r\n      });\r\n    });\r\n\r\n    return value;\r\n  }\r\n\r\n  getMostVisitedMove() {\r\n    if (this.actions.size === 0) throw new Error(\r\n      `Getting most visited move of MCTS node with no moves.\r\n      Node most likely has not undergone any simulations.`\r\n    );\r\n    \r\n    let bestMove: MoveType;\r\n    let bestAction: Action<MoveType, GameType> | undefined;\r\n\r\n    this.actions.forEach((action, move) => {\r\n      bestAction = this.actions.get(bestMove);\r\n      if (bestMove === undefined || (bestAction && action.numChosen > bestAction.numChosen)) {\r\n        bestMove = move;\r\n      }\r\n    });\r\n\r\n    return bestMove!;\r\n  }\r\n\r\n  makeMove(move: MoveType) {\r\n    const action = this.actions.get(move);\r\n\r\n    if (action === undefined) throw new Error(\"Move not found\");\r\n\r\n    this.state = action.node.state;\r\n    this.actions = action.node.actions;\r\n    this.actionsChosenTotal = action.node.actionsChosenTotal;\r\n    this.terminalValue = action.node.terminalValue;\r\n  }\r\n\r\n  simulate() {\r\n    if (this.terminalValue === undefined) {\r\n      // Using true value for terminal value. Another option is to use the value\r\n      // from the evaluate function.\r\n      const terminalValue = this.state.getTerminalValue(this.state.getCurrentPlayer());\r\n\r\n      if (terminalValue === TerminalValue.Loss) {\r\n        this.terminalValue = -1;\r\n      } else if (terminalValue === TerminalValue.Win) {\r\n        this.terminalValue = 0;\r\n      } else {\r\n        this.terminalValue = null;\r\n      }\r\n    }\r\n\r\n    // If state is terminal, then return the negated terminal value\r\n    if (this.terminalValue !== undefined && this.terminalValue !== null)\r\n      return -this.terminalValue;\r\n\r\n    // If node is leaf node\r\n    if (this.actions.size === 0) {\r\n      // Expand, evaluating the state, and return the value\r\n      return -this.expand();\r\n    }\r\n\r\n    // Node is not leaf node. Choose best action, get and update the action value,\r\n    // and return the negated value for the previous player.\r\n    const action = this.selectAction();\r\n    const value = action.node.simulate();\r\n    \r\n    // Update variables\r\n    action.avgValue = action.avgValue + (value - action.avgValue) / (action.numChosen + 1);\r\n    ++action.numChosen;\r\n    ++this.actionsChosenTotal;\r\n\r\n    return -value;\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n}","import type { ConnectFourMove } from \"./connectFourBoard\";\r\n\r\nexport enum Action {\r\n  SetNumSimulations,\r\n  GetMove,\r\n  UpdatePastMoves\r\n}\r\n\r\nexport enum ActionReturn {\r\n  GetMove\r\n}\r\n\r\nexport type SetNumSimulations = {\r\n  action: Action.SetNumSimulations,\r\n  payload: number\r\n}\r\n\r\nexport type UpdatePastMoves = {\r\n  action: Action.UpdatePastMoves,\r\n  payload: Array<ConnectFourMove>\r\n}\r\n\r\nexport type GetMove = {\r\n  action: Action.GetMove,\r\n  payload: Array<ConnectFourMove> // past moves\r\n}\r\n\r\nexport type GetMoveReturn = {\r\n  action: ActionReturn.GetMove,\r\n  payload: ConnectFourMove\r\n}\r\n\r\nexport type Message = SetNumSimulations | UpdatePastMoves | GetMove;\r\nexport type MessageReturn = GetMoveReturn;","/**\r\n * Web worker that makes neural network moves for a connect four game.\r\n * Relevant types are defined in connectFourNNStrategyMultiThread.\r\n * \r\n * @see https://webpack.js.org/guides/web-workers/ for getting web worker uri\r\n */\r\n\r\nimport { ConnectFourBoard } from \"./connectFourBoard\";\r\nimport { ConnectFourNeuralNet } from \"./connectFourNeuralNet\";\r\nimport { MCTS_Node_NN } from \"../turnGame/mcts_nn\";\r\nimport { TurnGameNeuralNet } from \"models/turnGame/neuralNet\";\r\nimport modelJSON from \"./model.json\";\r\nimport { Action, ActionReturn } from \"./connectFourNNStrategyWorkerTypes\";\r\nimport type { ConnectFourMove } from \"./connectFourBoard\";\r\nimport type { GetMoveReturn, Message } from \"./connectFourNNStrategyWorkerTypes\";\r\n\r\nlet node: MCTS_Node_NN<ConnectFourMove, ConnectFourBoard> | null = null;\r\nlet numSimulations = 50;\r\n\r\n/** Updates the internal mcts node to match the provided game state.*/\r\nconst updatePastMoves = (pastMoves: Array<ConnectFourMove>) => {\r\n  if (node === null) return;\r\n\r\n  // If the provided moves is only a single move ahead of the internal node's\r\n  // past moves, make the move. Otherwise, clear the node.\r\n  const nodeMoves = node.getState().getPastMoves();\r\n\r\n  if (pastMoves.length <= 0 || pastMoves.length !== nodeMoves.length) {\r\n    node = null;\r\n    return;\r\n  }\r\n\r\n  const lastMove = pastMoves.pop() as number;\r\n  let samePastMoves = true;\r\n  \r\n  for (let i=0; i<pastMoves.length; ++i) {\r\n    if (pastMoves[i] !== nodeMoves[i]) {\r\n      samePastMoves = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!samePastMoves) {\r\n    node = null;\r\n    return;\r\n  }\r\n\r\n  // There's only one move difference. Make the move for this.node.\r\n  node.makeMove(lastMove);\r\n};\r\n\r\nconst getMove = async (pastMoves: Array<ConnectFourMove>) => {\r\n  // If node does not match provided game state, create a new node.\r\n  if (node === null || node.getState().getPastMoves() !== pastMoves) {\r\n    const net = await TurnGameNeuralNet.build(ConnectFourNeuralNet, modelJSON);\r\n\r\n    const game = new ConnectFourBoard();\r\n    for (const move of pastMoves) game.makeMove(move);\r\n\r\n    node = new MCTS_Node_NN<ConnectFourMove, ConnectFourBoard>(\r\n      game,\r\n      ConnectFourBoard,\r\n      net,\r\n    );\r\n  }\r\n\r\n  for (let i=0; i<numSimulations; ++i) {\r\n    node.simulate();\r\n  }\r\n\r\n  return node.getMostVisitedMove();\r\n};\r\n\r\nonmessage = async (e) => {\r\n  const message = e.data as Message;\r\n  const action = message.action;\r\n\r\n  if (action === Action.GetMove) {\r\n    const move = await getMove(message.payload);\r\n\r\n    const messageReturn: GetMoveReturn = {\r\n      action: ActionReturn.GetMove,\r\n      payload: move\r\n    };\r\n\r\n    postMessage(messageReturn);\r\n  } else if (action === Action.SetNumSimulations) {\r\n    numSimulations = message.payload;\r\n  } else if (action === Action.UpdatePastMoves) {\r\n    updatePastMoves(message.payload);\r\n  }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [577], function() { return __webpack_require__(3928); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"ab5e6486\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t51: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkfengwei_github_io\"] = self[\"webpackChunkfengwei_github_io\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(577).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["TerminalValue","ConnectFourBoard","connectFour","bitboards","heights","numMoves","moves","undefined","this","BitSet","col","isValidMove","Error","move","xor","push","pop","NUM_COLS","get","player","RangeError","bitboard","getCurrentPlayer","bitsetZero","hasWon","and","slice","equals","Loss","Win","isFull","Draw","TOP","forEach","height","index","NUM_ROWS","Buffer","buf","TurnGameNeuralNet","model","getSerializedModel","modelStr","json","JSON","parse","getDeserializedModelFromJson","modelJson","weightData","Uint8Array","from","buffer","tf","modelTopology","weightSpecs","save","modelArtifacts","result","toString","stringify","constructor","getDeserializedModel","ConnectFourNeuralNet","inputBuf","i","ind","set","Math","floor","toTensor","pad","cardinality","outputs","inputs","getInputTensorsFromBitboards","random","outputTensors","getModel","predict","reverse","arraySync","priors","Map","map","prior","value","MCTS_Node_NN","state","ctor","network","actions","actionsChosenTotal","terminalValue","bestValue","bestAction","action","avgValue","priorProb","explorationConstant","sqrt","numChosen","validMoves","getValidMoves","noise","PD","length","dirichletAlpha","totalNoise","reduce","a","b","totalProb","child","makeMove","node","noisePercent","bestMove","size","getTerminalValue","expand","selectAction","simulate","Action","ActionReturn","numSimulations","updatePastMoves","pastMoves","nodeMoves","getState","getPastMoves","lastMove","samePastMoves","getMove","build","modelJSON","net","game","getMostVisitedMove","onmessage","e","message","data","GetMove","payload","messageReturn","postMessage","SetNumSimulations","UpdatePastMoves","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","call","m","x","__webpack_exports__","O","amdD","amdO","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","f","chunkId","Promise","all","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}